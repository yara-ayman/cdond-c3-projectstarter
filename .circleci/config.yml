version: 2.1
#orbs:
  # Choose either one of the orbs below
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
 # aws-cli: circleci/aws-cli@2.0.3
 #
commands:
  destroy_environment:
    description: Destroy Cloud Formation Stacks and infrastructure
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Destroy udapeople backend stack
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.id >>
          environment:
          when: << parameters.when >>
      - run:
          name: Destroy udapeople frontend stack and S3 bucket
          command: |
            aws s3 rm s3://udapeople-<< parameters.id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.id >>
          environment:
          when: << parameters.when >>

  revert_migrations:
    description: Revert the last migration
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            cd backend
            SUCCESS=$(curl --insecure https://kvdb.io/7ZY96jDPZNm7b52YU3GdLy/migration_<< parameters.id >>)
            echo $SUCCESS
            if [[ "$SUCCESS" == "success" ]]
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: << parameters.when >>

  revert-cloudfront:
    description:  Revert back to the old bucket
    parameters:
      when:
        type: string
      id:
        type: string
    steps:
      - run:
          name: revert cloudfront
          when: << parameters.when >>
          command: |
            aws cloudformation delete-stack --stack-name "InitialStack-${CIRCLE_WORKFLOW_ID:0:7}"


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          command: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add backend ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["26:c9:e9:61:e9:42:16:f7:7a:b4:3c:28:c1:ea:e9:da"]      
      - attach_workspace:
          at: .  
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure     
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail 

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: "Install Dependencies"
          working_directory: /tmp
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python3
            sudo apt-get -y install awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            touch migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            npm run migrations >> migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            cat migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt

      - run:
          name: Send migration results to kvdb
          command: |
            cd backend
            if grep  "success" migrations-${CIRCLE_WORKFLOW_ID:0:7}.txt
            then
              echo "DB migration was successful, will update kvdb..."
              curl --insecure https://kvdb.io/7ZY96jDPZNm7b52YU3GdLy/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
              echo "DB migration failed"
              curl --insecure https://kvdb.io/7ZY96jDPZNm7b52YU3GdLy/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
            echo "WorkflowID=udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
     # Here's where you will add some code to rollback on failure      
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - frontend-build
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            sudo apt-get -y update
            sudo apt-get -y install python3
            sudo apt-get -y install awscli
      - run:
          name: Get backend url
          command: |
            cd frontend
            touch .env
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > .env
            cat .env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist      
      # Here's where you will add some code to rollback on failure      
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["26:c9:e9:61:e9:42:16:f7:7a:b4:3c:28:c1:ea:e9:da"]
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: "Install Dependencies"
          working_directory: /tmp
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            pip install awscli    
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            pwd
            ls -lah 
            tar -czvf backend.tar.gz backend
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure  
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk --no-cache add curl
            apk update
            pip install awscli
    
      - run:
          name: test backend smoke test
          command: |
            URL="http://google.com/"
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi

      - run:    
          name: Backend smoke test.
          command: |
            cd backend
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}/api/status"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            cd frontend
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Save Frontend S3 bucket URL
          command: |
            cd images/URLs
            touch URL02.txt
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} > URL02.txt
            cat URL02.txt
# Here's where you will add some code to rollback on failure  
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: yum install -y tar curl

      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name "InitialStack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-promote
  # Here's where you will add some code to rollback on failure  
      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      -  revert-cloudfront:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |

            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"

      - run:
          name: Remove old stacks and files
          command: |
            # if [ "${OldWorkFlowID}" != " " ] && [ "${OldWorkFlowID}" != "${CurrentWorkflowID}" ]
            # then
            #   echo ${OldWorkFlowID}
            #   echo ${CurrentWorkflowID}
            #   echo "delete S3 bucket"
            #   aws s3 rb s3://${OldWorkFlowID} --force 
            #   echo "delete stacks"
            #   aws cloudformation delete-stack --stack-name backend-stack-${OldWorkFlowID}
            #   aws cloudformation delete-stack --stack-name frontend-stack-${OldWorkFlowID}
            #   aws cloudformation delete-stack --stack-name InitialStack-${OldWorkFlowID}              
            
            # else
            #   echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            # fi


            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            then
              echo ${OldWorkFlowID}
              echo "delete stacks"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "InitialStack-${OldWorkFlowID}" 
              echo "delete S3 bucket"
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive   
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => nothing needs to be done..."
            fi

      - destroy_environment:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      - revert_migrations:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
      -  revert-cloudfront:
          id: ${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail


workflows:
  default:
    jobs:
      - build-frontend
      #- build-backend
      #- test-frontend:
       #   requires: [build-frontend]
      #- test-backend:
      #    requires: [build-backend]
      #- scan-backend:
       #   requires: [build-backend]
      #- scan-frontend:
       #   requires: [build-frontend]
      #- deploy-infrastructure:
       #   requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #- configure-infrastructure:
       #   requires: [deploy-infrastructure]
      #- run-migrations:
       #   requires: [configure-infrastructure]
      #- deploy-frontend:
       #   requires: [run-migrations]
      #- deploy-backend:
       #   requires: [run-migrations]
      #- smoke-test:
       #   requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
       #   requires: [smoke-test]
      #- cleanup:
       #   requires: [cloudfront-update]